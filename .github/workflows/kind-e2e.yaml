name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main' ]

  push:
    branches: [ 'main' ]

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/net-gateway-api

jobs:
  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.20.7
        - v1.21.1
        - v1.22.0

        test-suite:
        - ./test/conformance/ingressv2

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases
        include:
        - k8s-version: v1.20.7
          kind-version: v0.11.1
          kind-image-sha: sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
          ingress: istio
        - k8s-version: v1.21.1
          kind-version: v0.11.1
          kind-image-sha: sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
          ingress: contour
        - k8s-version: v1.22.0
          kind-version: v0.11.1
          kind-image-sha: sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717
          ingress: istio



    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
      KO_DOCKER_REPO: kind.local
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local

    steps:
    - name: Set up Go 1.16.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/net-gateway-api

    - name: Install KinD
      run: |
        set -x

        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}

        # This is needed in order to
        # (1) support projected volumes with service account tokens. See
        #     https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        # (2) use a random cluster suffix
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
            networking:
              dnsDomain: "${CLUSTER_SUFFIX}"
        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Prepare test namespaces
      run: |
        set -o pipefail

        kubectl apply -f test/config/

    - name: Install ingress provider (Istio)
      if: matrix.ingress == 'istio'
      run: |
        set -o pipefail

        # gateway-api CRD must be installed before Istio.
        kubectl apply -k 'github.com/kubernetes-sigs/gateway-api/config/crd?ref=v0.3.0'

        # Replace cluster.local with random suffix.
        sed -ie "s/cluster\.local/${CLUSTER_SUFFIX}/g" third_party/istio-head/istio-kind-no-mesh.yaml
        sed -ie "s/cluster\.local/${CLUSTER_SUFFIX}/g" third_party/istio-head/gateway/300-gateway.yaml
        sed -ie "s/cluster\.local/${CLUSTER_SUFFIX}/g" third_party/istio-head/gateway/300-gateway-local.yaml

        # Deploy Istio
        ./third_party/istio-head/install-istio.sh istio-kind-no-mesh.yaml

        # Deploy gatewayclass and gateway.
        kubectl apply -f ./third_party/istio-head/gateway/

        echo "GATEWAY_OVERRIDE=istio-ingressgateway" >> $GITHUB_ENV
        echo "GATEWAY_NAMESPACE_OVERRIDE=istio-system" >> $GITHUB_ENV

    - name: Install ingress provider (Contour)
      if: matrix.ingress == 'contour'
      run: |
        set -o pipefail

        # Deploy Contour
        ./third_party/contour-head/install-operator.sh

        # wait for operator deployment to be Available
        kubectl wait deploy --for=condition=Available --timeout=120s -n "contour-operator" -l '!job-name'

        ko resolve -f ./third_party/contour-head/gateway/gateway-external.yaml | \
          sed 's/LoadBalancerService/NodePortService/g' | \
          kubectl apply -f -

        ko resolve -f ./third_party/contour-head/gateway/gateway-internal.yaml | \
          kubectl apply -f -

        # This tells the tests what namespace to look in for our kingress LB.
        echo "GATEWAY_OVERRIDE=envoy" >> $GITHUB_ENV
        echo "GATEWAY_NAMESPACE_OVERRIDE=contour-external" >> $GITHUB_ENV
        echo "LOCAL_GATEWAY_OVERRIDE=envoy" >> $GITHUB_ENV
        echo "LOCAL_GATEWAY_NAMESPACE_OVERRIDE=contour-internal" >> $GITHUB_ENV

    - name: Upload Test Images
      run: |
        # Build and Publish our test images to the docker daemon.
        ./test/upload-test-images.sh

    - name: Run e2e Tests
      run: |
        set -x

        # Exclude the control-plane node, which doesn't seem to expose the nodeport service.
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )

        # Run the tests tagged as e2e on the KinD cluster.
        go test -race -count=1 -short -timeout=20m -tags=e2e ${{ matrix.test-suite }} \
           --ingressClass=${{ matrix.ingress }} \
           --enable-alpha --enable-beta \
           --ingressendpoint="${IPS[0]}" \
           --cluster-suffix=$CLUSTER_SUFFIX

    - name: Post failure notice to Slack
      uses: rtCamp/action-slack-notify@v2.1.0
      if: ${{ failure() && github.event_name != 'pull_request' }}
      env:
        SLACK_ICON: http://github.com/knative.png?size=48
        SLACK_USERNAME: github-actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

        SLACK_CHANNEL: 'net-gateway-api'
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic ${{ matrix.k8s-version }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
